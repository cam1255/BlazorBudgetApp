@page "/expenses"
@page "/"
@using BudgetApp.Data
@using System.Globalization;
@using MudBlazor
@inject BudgetService budgetService


<form>
	<h4>Add Current Savings Amount</h4>
	<div class="row">
		<div class="col">
			<label class="control-label">Amount</label>
			<input class="form-control" @bind="CurrentBankAmount" />
		</div>
	</div>
	<div class="row mt-1">
		<div class="col">
			<button class="btn btn-primary" @onclick="@SetBankAmount">Add</button>
		</div>
	</div>
</form>

<form>
	<h4>Add income per month after tax</h4>
	<div class="row">
		<div class="col">
			<label class="control-label">Amount</label>
			<input class="form-control" @bind="Income" />
		</div>
	</div>
	<div class="row mt-1">
		<div class="col">
			<button class="btn btn-primary" @onclick="@SetIncome">Add</button>
		</div>
	</div>
</form>

<form>
	<h4>Add an Expense</h4>
	<div class="row">
		<div class="col">
			<label class="control-label">Description</label>
			<input class="form-control" @bind="newEntry.Description" />
		</div>
		<div class="col">
			<label class="control-label">Amount</label>
			<input class="form-control" @bind="newEntry.Amount" />
		</div>
	</div>
	<div class="row mt-1">
		<div class="col">
			<button class="btn btn-primary" @onclick="@CreateEntry">Add</button>
		</div>
	</div>
</form>

<table class="table table-striped table-bordered mt-2">
	<caption>Expenses List</caption>
	<thead class ="table-dark">
		<tr>
			<th>
				Description
			</th>
			<th>
				Amount
			</th>
			<th>
				% of Income
			</th>
			<th>
				<!-- Left Empty for formatting-->
			</th>
		</tr>
	</thead>
	<tbody>
		@foreach(Entry entry in allEntries)
		{
			<tr>
				<td>
					<div>@entry.Description</div>
				</td>
				<td>
					<div>$@entry.Amount</div>
				</td>
				<td>
					<div>@GetPercentIncome(entry)%</div>
				</td>
				<td>
					<div class="row">
						<div class="col">
							<button class="btn btn-primary" @onclick="() => allEntries.Remove(entry)">Del</button>
						</div>
					</div>
				</td>
			</tr>

		}

		<tr>
			<td>
				<div>Total</div>
			</td>
			<td>
				<div>$@GetTotalBalance()</div>
			</td>
			<td>
				<div>@GetPercentIncomeTotal()%</div>
			</td>
		</tr>
	</tbody>
</table>



@for (int j = 0; j < 48; j+=12)
{
	<table class="table table-striped table-bordered mt-2">
		<caption>Saved over time</caption>
		<thead class="table-dark">
			<tr>
				@for (int i = j; i < j+12; i++)
				{
					<th>
						<div>@Months[i]</div>
					</th>
				}
			</tr>
		</thead>
		<tbody>

			<tr>
				@for (int i = j; i < j + 12; i++)
				{
					<td>
						<div>$@MonthBalances[i]</div>
					</td>
				}
			</tr>


		</tbody>
	</table>
}

<MudPaper Class="pa-4">
	<MudChart ChartType="ChartType.Pie" InputData="@ChartData.Select(e=> (double)e.Amount).ToArray()" @bind-SelectedIndex="Index" InputLabels="@ChartData.Select(e=> e.Description).ToArray()" Width="300px" Height="300px" />
</MudPaper>



@code {
	List<Entry> allEntries = new List<Entry>();
	Entry newEntry = new Entry();
	List<Entry> ChartData = new List<Entry>();
	private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
	decimal Income = 0;
	decimal CurrentBankAmount = 0;
	decimal Balance = 0;
	List<string> Months = new List<string>();
	List<decimal> MonthBalances = new List<decimal>();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		allEntries = await budgetService.GetAllEntries();
		Income = await budgetService.GetIncome();
		Months = GetMonthsList();
		CurrentBankAmount = await budgetService.GetBankAmount();


	}

	protected async void CreateEntry()
	{
		if (newEntry.Description != null)
		{
			await budgetService.AddEntry(newEntry);
		}
		StateHasChanged();
	}

	protected async void SetIncome()
	{
		await budgetService.SetIncome(Income);
	}
	protected async void SetBankAmount()
	{
		await budgetService.SetBankAmount(CurrentBankAmount);
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		decimal tempBalance = await budgetService.GetIncome();
		foreach (Entry entry in allEntries)
		{
			tempBalance -= entry.Amount;
		}
		Balance = tempBalance;
		SetMonthBalance();
	}

	public static List<string> GetMonthsList()
	{
		List<string> monthsList = new List<string>();
		DateTime currentMonth = DateTime.Now;

		for (int i = 0; i < 48; i++)
		{
			string monthAbbreviation = currentMonth.ToString("MMM yy", CultureInfo.InvariantCulture);
			monthsList.Add(monthAbbreviation);
			currentMonth = currentMonth.AddMonths(1);
		}

		return monthsList;
	}
	protected async void SetMonthBalance()
	{
		List<decimal> tempBalances = new List<decimal>();
		for(int i = 1; i<= Months.Count; i++)
		{
			tempBalances.Add((Balance * i)+CurrentBankAmount);
		}
		MonthBalances = tempBalances;
	}

	public string GetPercentIncome(Entry entry)
	{
		if (Income > 0)
		{
			var percent = entry.Amount / Income;
			return (percent * 100).ToString("0.00");
		}
		return string.Empty;
	}
	public string GetPercentIncomeTotal()
	{
		if (Income > 0)
		{
			decimal percent = 0;
			foreach (Entry entry in allEntries)
			{
				var tempPercent = entry.Amount / Income;
				percent += tempPercent;
			}

			return (percent * 100).ToString("0.00");
		}
		return string.Empty;
	}
	public string GetTotalBalance()
	{
		decimal Total = 0;
		foreach (Entry entry in allEntries)
		{
			Total += entry.Amount;
		}
		Entry defaultEntry = new Entry();
		defaultEntry.Description = "Saved";
		defaultEntry.Amount = Income - Total;
		var entryExists = ChartData.Any(e => e.Description == defaultEntry.Description);

		if (!entryExists)
		{
			ChartData.Add(defaultEntry);
		}
		else
		{
			ChartData.First(e => e.Description == defaultEntry.Description).Amount = defaultEntry.Amount;
		}


		
		return Total.ToString("0.00");
	}
	

}
