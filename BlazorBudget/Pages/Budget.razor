@page "/budget"

<h3>Budget Spreadsheet</h3>
<div>
	<InputDate @bind-Value="Date" onchange="@(() => RefreshTableData())" />

	<InputText @bind-Value="NewExpense.Name" />
	<InputText @bind-Value="NewExpense.Amount" />
	<button @onclick="@(() => AddExpense(NewExpense))">Add Expense</button>
	<MudTable Items=CurrentMonthExpenses>
		<HeaderContent>
			<th>Expenses</th>
		</HeaderContent>
		<RowTemplate>
			<td>@context.Name</td>
			<td>@context.Amount</td>
		</RowTemplate>
	</MudTable>
</div>



@code {
	public Dictionary<string, List<Expense>> MonthlyExpenses { get; set; } = new Dictionary<string, List<Expense>>();
	List<Expense> CurrentMonthExpenses = new List<Expense>();
	Expense NewExpense = new Expense();
	DateOnly Date = DateOnly.FromDateTime(DateTime.Now);
	protected override void OnInitialized()
	{
		MonthlyExpenses.Add(DateOnly.FromDateTime(DateTime.Now).ToString(), CurrentMonthExpenses);
	}
	public void AddExpense(Expense expense)
	{
		var tempExpense = new Expense();
		tempExpense.Month = Date.Month.ToString();

		tempExpense.Name = expense.Name;
		tempExpense.Amount = expense.Amount;
		if (CurrentMonthExpenses.Contains(tempExpense))
		{
			CurrentMonthExpenses.Add(tempExpense);
		}
		else
		{
			CurrentMonthExpenses.Add(tempExpense);
		}
		MonthlyExpenses[Date.Month.ToString()] = CurrentMonthExpenses;
	}
	public List<Expense> GetMonthlyExpenses()
	{
		
		if (MonthlyExpenses.Keys.Contains(NewExpense.Month))
		{
			return MonthlyExpenses[NewExpense.Month];
		}
		return new List<Expense>();
	}
	async Task RefreshTableData()
	{
		// Perform actions when the input's value changes
		var newDate = Date.Month.ToString();
		var list = MonthlyExpenses[newDate];
		CurrentMonthExpenses.Clear();
		foreach (var item in list)
		{
			CurrentMonthExpenses.Add(item);
		}
		await InvokeAsync(StateHasChanged);
	}

}